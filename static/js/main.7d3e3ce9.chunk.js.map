{"version":3,"sources":["components/search/search.styles.jsx","components/search/search.component.jsx","components/card/card.styles.jsx","components/card/card.component.jsx","components/card-list/card-list.styles.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchStyled","styled","input","Search","placeholder","value","handleChange","type","onChange","e","target","CardStyled","div","Card","name","id","email","src","alt","CardListStyled","CardList","monsters","map","monster","key","App","useState","setMonsters","searchQuery","setSearchQuery","useEffect","a","fetch","data","json","fetchData","filteredMonsters","filter","toLowerCase","includes","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wfAEO,IAAMA,EAAeC,IAAOC,MAAV,KCWVC,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAvB,OACd,kBAACN,EAAD,CACCO,KAAK,SACLH,YAAcA,EACdC,MAAQA,EACRG,SAAW,SAAAC,GAAC,OAAIH,EAAaG,EAAEC,OAAOL,W,0aCPjC,IAAMM,EAAaV,IAAOW,IAAV,KCURC,EARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,MAAb,OACZ,kBAACL,EAAD,KACC,yBAAKM,IAAG,+BAA4BF,EAA5B,aAA6CG,IAAI,KACzD,4BAAMJ,GACN,2BAAKE,K,gNCNA,IAAMG,EAAiBlB,IAAOW,IAAV,KCgBZQ,EAZE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,kBAACF,EAAD,KAEEE,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,eAAMC,IAAMD,EAAQR,IAAUQ,SCgCpBE,G,MApCH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACVL,EADU,KACAM,EADA,OAEqBD,mBAAS,IAF9B,mBAEVE,EAFU,KAEGC,EAFH,KAIjBC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,8CADR,cACXC,EADW,gBAEMA,EAAKC,OAFX,OAEXb,EAFW,OAGjBM,EAAYN,GAHK,2CAAH,qDAMfc,KACE,IAEH,IAIMC,EAAmBf,EAASgB,QACjC,SAAAd,GAAO,OAAIA,EAAQT,KAAKwB,cAAcC,SAASX,EAAYU,kBAI5D,OAFAE,QAAQC,IAAIL,GAGX,yBAAKM,UAAU,OACd,gDACA,kBAAC,EAAD,CACCtC,YAAY,kBACZC,MAAQuB,EACRtB,aAfuB,SAACsB,GAC1BC,EAAeD,MAgBd,kBAAC,EAAD,CAAUP,SAAWe,OC1BJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.7d3e3ce9.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SearchStyled = styled.input`\r\n\t-webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  line-height: 30px;\r\n  margin-bottom: 30px;\r\n`;\r\n","import React from 'react';\r\n\r\nimport { SearchStyled } from './search.styles';\r\n\r\nconst Search = ({ placeholder, value, handleChange }) => (\r\n\t<SearchStyled\r\n\t\ttype=\"search\"\r\n\t\tplaceholder={ placeholder }\r\n\t\tvalue={ value }\r\n\t\tonChange={ e => handleChange(e.target.value) }\r\n\t/>\r\n);\r\n\r\nexport default Search;\r\n","import styled from 'styled-components';\r\n\r\nexport const CardStyled = styled.div`\r\n\tdisplay: flex;\r\n  flex-direction: column;\r\n  background-color: #95dada;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform 0.25s ease-out;\r\n  \r\n  &:hover {\r\n\t  transform: scale(1.05);\r\n\t}\r\n`;\r\n","import React from 'react';\r\n\r\nimport { CardStyled } from './card.styles';\r\n\r\nconst Card = ({ name, id, email }) => (\r\n\t<CardStyled>\r\n\t\t<img src={ `https://robohash.org/${ id }?set=set2` } alt=\"\"/>\r\n\t\t<h2>{ name }</h2>\r\n\t\t<p>{ email }</p>\r\n\t</CardStyled>\r\n);\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nexport const CardListStyled = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  grid-gap: 20px;\r\n\twidth: 85vw;\r\n\tmax-width: 1600px;\r\n  margin: 0 auto;\r\n`;\r\n","import React from 'react';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nimport { CardListStyled } from './card-list.styles';\r\n\r\nconst CardList = ({ monsters }) => {\r\n\treturn (\r\n\t\t<CardListStyled>\r\n\t\t\t{\r\n\t\t\t\tmonsters.map((monster) => (\r\n\t\t\t\t\t<Card key={ monster.id } { ...monster }/>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t</CardListStyled>\r\n\t)\r\n};\r\n\r\nexport default CardList;\r\n","import React, { useState, useEffect } from 'react';\n\nimport Search from './components/search/search.component';\nimport CardList from './components/card-list/card-list.component';\n\nimport './App.css';\n\nconst App = () => {\n\tconst [monsters, setMonsters] = useState([]);\n\tconst [searchQuery, setSearchQuery] = useState('');\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tconst data = await fetch('https://jsonplaceholder.typicode.com/users');\n\t\t\tconst monsters = await data.json();\n\t\t\tsetMonsters(monsters);\n\t\t};\n\n\t\tfetchData();\n\t}, [])\n\n\tconst handleSearchQuery = (searchQuery) => {\n\t\tsetSearchQuery(searchQuery);\n\t};\n\n\tconst filteredMonsters = monsters.filter(\n\t\tmonster => monster.name.toLowerCase().includes(searchQuery.toLowerCase()));\n\n\tconsole.log(filteredMonsters);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t<Search\n\t\t\t\tplaceholder=\"Search monsters\"\n\t\t\t\tvalue={ searchQuery }\n\t\t\t\thandleChange={ handleSearchQuery }\n\t\t\t/>\n\t\t\t<CardList monsters={ filteredMonsters }/>\n\t\t</div>\n\t)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}